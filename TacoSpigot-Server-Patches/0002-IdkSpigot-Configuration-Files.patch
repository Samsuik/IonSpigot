From 906b6816e0a6cc069294468e01a138f68556c896 Mon Sep 17 00:00:00 2001
From: SuicidalKids <kfian294ma4@gmail.com>
Date: Tue, 15 Sep 2020 05:03:57 +0100
Subject: [PATCH] IdkSpigot Configuration Files

<o/

diff --git a/src/main/java/me/suicidalkids/idkspigot/IdkSpigotConfig.java b/src/main/java/me/suicidalkids/idkspigot/IdkSpigotConfig.java
new file mode 100644
index 000000000..636b9a86a
--- /dev/null
+++ b/src/main/java/me/suicidalkids/idkspigot/IdkSpigotConfig.java
@@ -0,0 +1,118 @@
+package me.suicidalkids.idkspigot;
+
+import com.google.common.base.Throwables;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.spigotmc.Metrics;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.logging.Level;
+
+public class IdkSpigotConfig {
+
+    private static File CONFIG_FILE;
+    private static final String HEADER = "This is the main configuration file for IdkSpigot.\n" + "As you can see, there's tons to configure. Some options may impact gameplay, so use\n" + "with caution, and make sure you know what each option does before configuring.\n";
+    /*========================================================================*/
+    public static YamlConfiguration config;
+    static int version;
+    static Map<String, Command> commands;
+    /*========================================================================*/
+
+    public static void init(File configFile) {
+        CONFIG_FILE = configFile;
+        config = new YamlConfiguration();
+        try {
+            System.out.println("Loading IdkSpigot config from " + configFile.getName());
+            config.load(CONFIG_FILE);
+        } catch (IOException ex) {
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load idk.yml, please correct your syntax errors", ex);
+            throw Throwables.propagate(ex);
+        }
+        config.options().header(HEADER);
+        config.options().copyDefaults(true);
+
+        commands = new HashMap<>();
+
+        version = getInt("config-version", 1);
+        set("config-version", 1);
+        readConfig(IdkSpigotConfig.class, null);
+    }
+
+    public static void registerCommands() {
+        for (Map.Entry<String, Command> entry : commands.entrySet()) {
+            MinecraftServer.getServer().server.getCommandMap().register( entry.getKey(), "Idk", entry.getValue() );
+        }
+    }
+
+    private static void commands() {
+    }
+
+    static void readConfig(Class<?> clazz, Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(instance);
+                    } catch (InvocationTargetException ex) {
+                        throw Throwables.propagate(ex.getCause());
+                    } catch (Exception ex) {
+                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+                    }
+                }
+            }
+        }
+
+        try {
+            config.save(CONFIG_FILE);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+        }
+    }
+
+    private static void set(String path, Object val) {
+        config.set(path, val);
+    }
+
+    private static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    private static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+    }
+
+    private static float getFloat(String path, float def) {
+        config.addDefault(path, def);
+        return config.getFloat(path, config.getFloat(path));
+    }
+
+    private static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+
+    private static <T> List getList(String path, T def) {
+        config.addDefault(path, def);
+        return (List<T>) config.getList(path, config.getList(path));
+    }
+
+    private static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+
+}
diff --git a/src/main/java/me/suicidalkids/idkspigot/IdkSpigotWorldConfig.java b/src/main/java/me/suicidalkids/idkspigot/IdkSpigotWorldConfig.java
new file mode 100644
index 000000000..e05430914
--- /dev/null
+++ b/src/main/java/me/suicidalkids/idkspigot/IdkSpigotWorldConfig.java
@@ -0,0 +1,67 @@
+package me.suicidalkids.idkspigot;
+
+import org.bukkit.Bukkit;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+import java.util.List;
+
+public class IdkSpigotWorldConfig {
+
+    private final String worldName;
+    private final YamlConfiguration config;
+    private boolean verbose;
+
+    public IdkSpigotWorldConfig(String worldName) {
+        this.worldName = worldName;
+        this.config = IdkSpigotConfig.config;
+        init();
+    }
+
+    public void init() {
+        this.verbose = getBoolean("verbose", true);
+
+        log("-------- World Settings For [" + worldName + "] --------");
+        IdkSpigotConfig.readConfig(IdkSpigotWorldConfig.class, this);
+    }
+
+    private void log(String s) {
+        if (verbose) {
+            Bukkit.getLogger().info(s);
+        }
+    }
+
+    private void set(String path, Object val) {
+        config.set(path, val);
+    }
+
+    private boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean("world-settings." + worldName + "." + path, config.getBoolean(path));
+    }
+
+    private double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble("world-settings." + worldName + "." + path, config.getDouble(path));
+    }
+
+    private int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt("world-settings." + worldName + "." + path, config.getInt(path));
+    }
+
+    private float getFloat(String path, float def) {
+        config.addDefault(path, def);
+        return config.getFloat("world-settings." + worldName + "." + path, config.getFloat(path));
+    }
+
+    private <T> List getList(String path, T def) {
+        config.addDefault(path, def);
+        return (List<T>) config.getList("world-settings." + worldName + "." + path, config.getList(path));
+    }
+
+    private String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString("world-settings." + worldName + "." + path, config.getString(path));
+    }
+
+}
diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index 088beb22b..b3ea51626 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -181,6 +181,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
             org.github.paperspigot.PaperSpigotConfig.init((File) options.valueOf("paper-settings"));
             org.github.paperspigot.PaperSpigotConfig.registerCommands();
             // PaperSpigot end
+            me.suicidalkids.idkspigot.IdkSpigotConfig.registerCommands(); // IdkSpigot
 
             DedicatedServer.LOGGER.info("Generating keypair");
             this.a(MinecraftEncryption.b());
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index d4f337e22..b5a2fb3e7 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -163,6 +163,7 @@ public abstract class World implements IBlockAccess {
 
     public final co.aikar.timings.WorldTimingsHandler timings; // Spigot
     public final net.techcable.tacospigot.TacoSpigotWorldConfig tacoSpigotConfig;
+    public final me.suicidalkids.idkspigot.IdkSpigotWorldConfig idkSpigotConfig; // IdkSpigot - TacoSpigot broke the chain ^
 
     public CraftWorld getWorld() {
         return this.world;
@@ -180,6 +181,7 @@ public abstract class World implements IBlockAccess {
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig( worlddata.getName() ); // Spigot
         this.paperSpigotConfig = new org.github.paperspigot.PaperSpigotWorldConfig( worlddata.getName() ); // PaperSpigot
         this.tacoSpigotConfig = new net.techcable.tacospigot.TacoSpigotWorldConfig(worlddata.getName()); // TacoSpigot
+        this.idkSpigotConfig = new me.suicidalkids.idkspigot.IdkSpigotWorldConfig(worlddata.getName()); // IdkSpigot
         this.generator = gen;
         this.world = new CraftWorld((WorldServer) this, gen, env);
         this.ticksPerAnimalSpawns = this.getServer().getTicksPerAnimalSpawns(); // CraftBukkit
diff --git a/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java b/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java
index c0a716023..dcde30963 100644
--- a/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java
+++ b/src/main/java/net/techcable/tacospigot/TacoSpigotConfig.java
@@ -24,7 +24,7 @@ public class TacoSpigotConfig {
     private static File CONFIG_FILE;
     private static final String HEADER = "This is the main configuration file for TacoSpigot.\n" + "As you can see, there's tons to configure. Some options may impact gameplay, so use\n" + "with caution, and make sure you know what each option does before configuring.\n" + "\n" + "If you need help with the configuration or have any questions related to TacoSpigot,\n" + "join us at the IRC.\n" + "\n" + "IRC: #taco @ irc.spi.gt ( http://irc.spi.gt/iris/?channels=taco )\n";
     /*========================================================================*/
-    static YamlConfiguration config;
+    public static YamlConfiguration config; // IdkSpigot - public <- package private
     static int version;
     /*========================================================================*/
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index a2fb03987..674ab4004 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -715,6 +715,7 @@ public final class CraftServer implements Server {
         org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
         org.github.paperspigot.PaperSpigotConfig.init((File) console.options.valueOf("paper-settings")); // PaperSpigot
         net.techcable.tacospigot.TacoSpigotConfig.init((File) console.options.valueOf("taco-settings")); // TacoSpigot
+        me.suicidalkids.idkspigot.IdkSpigotConfig.init((File) console.options.valueOf("idk-settings")); // IdkSpigot
         for (WorldServer world : console.worlds) {
             world.worldData.setDifficulty(difficulty);
             world.setSpawnFlags(monsters, animals);
@@ -739,6 +740,7 @@ public final class CraftServer implements Server {
         resetRecipes();
         org.spigotmc.SpigotConfig.registerCommands(); // Spigot
         org.github.paperspigot.PaperSpigotConfig.registerCommands(); // PaperSpigot
+        me.suicidalkids.idkspigot.IdkSpigotConfig.registerCommands(); // IdkSpigot
 
         overrideAllCommandBlockCommands = commandsConfiguration.getStringList("command-block-overrides").contains("*");
 
@@ -1808,6 +1810,20 @@ public final class CraftServer implements Server {
             return org.github.paperspigot.PaperSpigotConfig.config;
         }
 
+        // IdkSpigot start - Configuration Files
+        @Override
+        public YamlConfiguration getTacoSpigotConfig()
+        {
+            return net.techcable.tacospigot.TacoSpigotConfig.config;
+        }
+
+        @Override
+        public YamlConfiguration getIdkSpigotConfig()
+        {
+            return me.suicidalkids.idkspigot.IdkSpigotConfig.config;
+        }
+        // IdkSpigot end
+
         @Override
         public void restart() {
             org.spigotmc.RestartCommand.restart();
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index a5bbd8b71..0be1fb5a5 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -148,6 +148,14 @@ public class Main {
                         .defaultsTo(new File("taco.yml"))
                         .describedAs("Yml file");
                 // TacoSpigot end
+
+                // IdkSpigot start
+                acceptsAll(asList("idk", "idk-settings"), "File for idkspigot settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("idk.yml"))
+                        .describedAs("Yml file");
+                // IdkSpigot end
             }
         };
 
@@ -216,6 +224,7 @@ public class Main {
                 }
                 // Spigot End
                 net.techcable.tacospigot.TacoSpigotConfig.init((File) options.valueOf("taco-settings")); // TacoSpigot - load config before we load libraries to allow access while loading
+                me.suicidalkids.idkspigot.IdkSpigotConfig.init((File) options.valueOf("idk-settings")); // IdkSpigot
                 System.out.println("Loading libraries, please wait...");
                 MinecraftServer.main(options);
             } catch (Throwable t) {
-- 
2.20.1.windows.1

