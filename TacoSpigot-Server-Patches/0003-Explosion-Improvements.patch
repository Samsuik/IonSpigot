From 48b843febecc5c99c6caebe713cc24ba0b4b181f Mon Sep 17 00:00:00 2001
From: SuicidalKids <kfian294ma4@gmail.com>
Date: Tue, 15 Sep 2020 05:06:25 +0100
Subject: [PATCH] Explosion Improvements


diff --git a/src/main/java/me/suicidalkids/ion/IonWorldConfig.java b/src/main/java/me/suicidalkids/ion/IonWorldConfig.java
index 7a3e812f4..bad9040fb 100644
--- a/src/main/java/me/suicidalkids/ion/IonWorldConfig.java
+++ b/src/main/java/me/suicidalkids/ion/IonWorldConfig.java
@@ -82,4 +82,19 @@ public class IonWorldConfig {
         return config.getString("world-settings." + worldName + "." + path, config.getString(path));
     }
 
+    public boolean constantExplosions;
+    private void ConstantExplosions() {
+        constantExplosions = getBoolean("explosions.constant-radius", false);
+    }
+
+    public boolean explosionProtectedRegions;
+    private void ExplosionProtectedRegions() {
+        explosionProtectedRegions = getBoolean("explosions.protected-regions", true);
+    }
+
+    public boolean reducedDensityRays;
+    private void ReducedDensityRays() {
+        reducedDensityRays = getBoolean("explosions.reduced-density-rays", false);
+    }
+
 }
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index c4bfd5fe6..03bc6c5ab 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -129,6 +129,7 @@ public abstract class Entity implements ICommandListener {
     public boolean valid; // CraftBukkit
     public org.bukkit.projectiles.ProjectileSource projectileSource; // CraftBukkit - For projectiles only
     public boolean forceExplosionKnockback; // CraftBukkit - SPIGOT-949
+    public boolean isCannoningEntity; // IonSpigot
     public boolean inUnloadedChunk = false; // PaperSpigot - Remove entities in unloaded chunks
     public boolean loadChunks = false; // PaperSpigot - Entities can load chunks they move through and keep them loaded
 
@@ -175,6 +176,7 @@ public abstract class Entity implements ICommandListener {
             this.defaultActivationState = false;
         }
         // Spigot end
+        this.isCannoningEntity = this instanceof EntityTNTPrimed || this instanceof EntityFallingBlock; // IonSpigot
 
         this.datawatcher = new DataWatcher(this);
         this.datawatcher.a(0, Byte.valueOf((byte) 0));
diff --git a/src/main/java/net/minecraft/server/Explosion.java b/src/main/java/net/minecraft/server/Explosion.java
index f4ccd8d4d..ab6c76118 100644
--- a/src/main/java/net/minecraft/server/Explosion.java
+++ b/src/main/java/net/minecraft/server/Explosion.java
@@ -3,11 +3,8 @@ package net.minecraft.server;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Random;
+
+import java.util.*;
 
 // CraftBukkit start
 import org.bukkit.craftbukkit.event.CraftEventFactory;
@@ -54,9 +51,33 @@ public class Explosion {
         int i;
         int j;
 
-        Block b = world.getChunkAt((int)posX >> 4, (int)posZ >> 4).getBlockData(new BlockPosition(posX, posY, posZ)).getBlock(); // TacoSpigot - get block of the explosion
+        // IonSpigot start - Block Searching Improvements
+        BlockPosition pos = new BlockPosition(posX, posY, posZ);
+        Chunk chunk = world.getChunkAt(pos.getX() >> 4, pos.getZ() >> 4);
+        Block b = chunk.getBlockData(pos).getBlock(); // TacoSpigot - get block of the explosion
 
         if (!this.world.tacoSpigotConfig.optimizeLiquidExplosions || !b.getMaterial().isLiquid()) { //TacoSpigot - skip calculating what blocks to blow up in water/lava
+            boolean protection = false;
+            if (world.ionConfig.explosionProtectedRegions) {
+                Location location = new Location(world.getWorld(), posX, posY, posZ);
+
+                List<org.bukkit.block.Block> list = new java.util.ArrayList<>(1);
+                int x = org.bukkit.util.NumberConversions.floor(posX);
+                int y = org.bukkit.util.NumberConversions.floor(posY);
+                int z = org.bukkit.util.NumberConversions.floor(posZ);
+                list.add(chunk.bukkitChunk.getBlock(x, y, z));
+
+                EntityExplodeEvent event = new EntityExplodeEvent(source.getBukkitEntity(), location, list, 0.3F);
+                world.getServer().getPluginManager().callEvent(event);
+
+                if (event.isCancelled() || event.blockList().isEmpty()) {
+                    protection = true;
+                }
+            }
+            if (!protection) {
+                it.unimi.dsi.fastutil.longs.LongSet set = new it.unimi.dsi.fastutil.longs.LongOpenHashSet();
+                searchForBlocks(set, chunk);
+            /*
         for (int k = 0; k < 16; ++k) {
             for (i = 0; i < 16; ++i) {
                 for (j = 0; j < 16; ++j) {
@@ -96,45 +117,74 @@ public class Explosion {
                 }
             }
         }
+            */
+                for (it.unimi.dsi.fastutil.longs.LongIterator iterator = set.iterator(); iterator.hasNext(); ) {
+                    this.blocks.add(BlockPosition.fromLong(iterator.nextLong()));
+                }
+            }
+            // IonSpigot end
         }
 
         this.blocks.addAll(hashset);
         float f3 = this.size * 2.0F;
 
-        i = MathHelper.floor(this.posX - (double) f3 - 1.0D);
-        j = MathHelper.floor(this.posX + (double) f3 + 1.0D);
-        int l = MathHelper.floor(this.posY - (double) f3 - 1.0D);
-        int i1 = MathHelper.floor(this.posY + (double) f3 + 1.0D);
-        int j1 = MathHelper.floor(this.posZ - (double) f3 - 1.0D);
-        int k1 = MathHelper.floor(this.posZ + (double) f3 + 1.0D);
+        // IonSpigot start - Faster Entity Iteration
+        i = MathHelper.floor(this.posX - (double) f3 - 1.0D) >> 4;
+        j = MathHelper.floor(this.posX + (double) f3 + 1.0D) >> 4;
+        int l = MathHelper.clamp(MathHelper.floor(this.posY - (double) f3 - 1.0D) >> 4, 0, 15);
+        int i1 = MathHelper.clamp(MathHelper.floor(this.posY + (double) f3 + 1.0D) >> 4, 0, 15);
+        int j1 = MathHelper.floor(this.posZ - (double) f3 - 1.0D) >> 4;
+        int k1 = MathHelper.floor(this.posZ + (double) f3 + 1.0D) >> 4;
         // PaperSpigot start - Fix lag from explosions processing dead entities
+        /*
         List list = this.world.a(this.source, new AxisAlignedBB((double) i, (double) l, (double) j1, (double) j, (double) i1, (double) k1), new com.google.common.base.Predicate<Entity>() {
             @Override
             public boolean apply(Entity entity) {
                 return IEntitySelector.d.apply(entity) && !entity.dead;
             }
         });
+        */
         // PaperSpigot end
         Vec3D vec3d = new Vec3D(this.posX, this.posY, this.posZ);
 
+        for (int chunkX = i; chunkX <= j; ++chunkX) {
+            for (int chunkZ = j1; chunkZ <= k1; ++chunkZ) {
+                chunk = world.getChunkIfLoaded(chunkX, chunkZ);
+
+                if (chunk == null) {
+                    continue;
+                }
+
+                for (int chunkY = l; chunkY <= i1; ++chunkY) {
+                    affectEntities(chunk.entitySlices[chunkY], vec3d, f3);
+                }
+            }
+        }
+    }
+    public void affectEntities(List list, Vec3D vec3d, float f3) {
         for (int l1 = 0; l1 < list.size(); ++l1) {
             Entity entity = (Entity) list.get(l1);
 
             if (!entity.aW()) {
-                double d7 = entity.f(this.posX, this.posY, this.posZ) / (double) f3;
-
-                if (d7 <= 1.0D) {
+                if (!entity.dead) {
                     double d8 = entity.locX - this.posX;
-                    double d9 = entity.locY + (double) entity.getHeadHeight() - this.posY;
+                    double d9 = entity.locY + entity.getHeadHeight() - this.posY;
                     double d10 = entity.locZ - this.posZ;
-                    double d11 = (double) MathHelper.sqrt(d8 * d8 + d9 * d9 + d10 * d10);
+                    double distanceSquared = d8 * d8 + d9 * d9 + d10 * d10;
 
-                    if (d11 != 0.0D) {
+                    if (distanceSquared <= 64.0D && distanceSquared != 0.0D) {
+                        double d11 = (double) MathHelper.sqrt(distanceSquared);
+                        double d7 = d11 / (double) f3;
                         d8 /= d11;
                         d9 /= d11;
                         d10 /= d11;
                         double d12 = this.getBlockDensity(vec3d, entity.getBoundingBox()); // PaperSpigot - Optimize explosions
                         double d13 = (1.0D - d7) * d12;
+                        if (entity.isCannoningEntity) {
+                            entity.g(d8 * d13, d9 * d13, d10 * d13);
+                            continue;
+                        }
+                        // IonSpigot end
 
                         // entity.damageEntity(DamageSource.explosion(this), (float) ((int) ((d13 * d13 + d13) / 2.0D * 8.0D * (double) f3 + 1.0D)));+                        // CraftBukkit start
                         CraftEventFactory.entityDamage = source;
@@ -233,6 +283,8 @@ public class Explosion {
                 Block block = this.world.getType(blockposition).getBlock();
 
                 world.spigotConfig.antiXrayInstance.updateNearbyBlocks(world, blockposition); // Spigot
+                // IonSpigot start - Optimise Explosions
+                /*
                 if (flag) {
                     double d0 = (double) ((float) blockposition.getX() + this.world.random.nextFloat());
                     double d1 = (double) ((float) blockposition.getY() + this.world.random.nextFloat());
@@ -254,6 +306,8 @@ public class Explosion {
                     this.world.addParticle(EnumParticle.EXPLOSION_NORMAL, (d0 + this.posX * 1.0D) / 2.0D, (d1 + this.posY * 1.0D) / 2.0D, (d2 + this.posZ * 1.0D) / 2.0D, d3, d4, d5, new int[0]);
                     this.world.addParticle(EnumParticle.SMOKE_NORMAL, d0, d1, d2, d3, d4, d5, new int[0]);
                 }
+                */
+                // IonSpigot end
 
                 if (block.getMaterial() != Material.AIR) {
                     if (block.a(this)) {
@@ -301,23 +355,187 @@ public class Explosion {
     public List<BlockPosition> getBlocks() {
         return this.blocks;
     }
+    // IonSpigot start - Block Searching Improvements
+    private final static List<double[]> VECTORS = Lists.newArrayListWithCapacity(1352);
+
+    static {
+        for (int k = 0; k < 16; ++k) {
+            for (int i = 0; i < 16; ++i) {
+                for (int j = 0; j < 16; ++j) {
+                    if (k == 0 || k == 15 || i == 0 || i == 15 || j == 0 || j == 15) {
+                        double d0 = (float) k / 15.0F * 2.0F - 1.0F;
+                        double d1 = (float) i / 15.0F * 2.0F - 1.0F;
+                        double d2 = (float) j / 15.0F * 2.0F - 1.0F;
+                        double d3 = Math.sqrt(d0 * d0 + d1 * d1 + d2 * d2);
+
+                        d0 = (d0 / d3) * 0.30000001192092896D;
+                        d1 = (d1 / d3) * 0.30000001192092896D;
+                        d2 = (d2 / d3) * 0.30000001192092896D;
+                        VECTORS.add(new double[] {d0, d1, d2});
+                    }
+                }
+            }
+        }
+    }
+
+    // https://github.com/jellysquid3/lithium-fabric/blob/1.16.x/dev/src/main/java/me/jellysquid/mods/lithium/mixin/world/explosions/ExplosionMixin.java
+    private void searchForBlocks(it.unimi.dsi.fastutil.longs.LongSet set, Chunk chunk) {
+        BlockPosition.MutableBlockPosition blockposition = new BlockPosition.MutableBlockPosition();
+
+        for (double[] vector : VECTORS) {
+            double d0 = vector[0];
+            double d1 = vector[1];
+            double d2 = vector[2];
+
+            float f = this.size * (0.7F + (world.ionConfig.constantExplosions ? 0.7F : this.world.random.nextFloat()) * 0.6F);
+            float resistance = 0;
+
+            double stepX = this.posX;
+            double stepY = this.posY;
+            double stepZ = this.posZ;
+
+            for (; f > 0.0F; f -= 0.22500001F) {
+                int floorX = org.bukkit.util.NumberConversions.floor(stepX);
+                int floorY = org.bukkit.util.NumberConversions.floor(stepY);
+                int floorZ = org.bukkit.util.NumberConversions.floor(stepZ);
+
+                if (blockposition.getX() != floorX || blockposition.getY() != floorY || blockposition.getZ() != floorZ) {
+                    blockposition.setValues(floorX, floorY, floorZ);
+
+                    int chunkX = floorX >> 4;
+                    int chunkZ = floorZ >> 4;
+                    if (chunk == null || !chunk.o() || chunk.locX != chunkX || chunk.locZ != chunkZ) {
+                        chunk = world.getChunkAt(chunkX, chunkZ);
+                    }
+
+                    IBlockData iblockdata = chunk.getBlockData(blockposition);
+                    Block block = iblockdata.getBlock();
+
+                    if (block != Blocks.AIR) {
+                        float blockResistance = block.durability / 5.0f;
+                        resistance = (blockResistance + 0.3F) * 0.3F;
+                        f -= resistance;
+
+                        if (f > 0.0F && (this.source == null || this.source.a(this, this.world, blockposition, iblockdata, f)) && blockposition.getY() < 256 && blockposition.getY() >= 0) { // CraftBukkit - don't wrap explosions
+                            set.add(blockposition.asLong());
+                        }
+                    }
+                } else {
+                    f -= resistance;
+                }
+
+                stepX += d0;
+                stepY += d1;
+                stepZ += d2;
+            }
+        }
+    }
+    // IonSpigot end
 
     // PaperSpigot start - Optimize explosions
     private float getBlockDensity(Vec3D vec3d, AxisAlignedBB aabb) {
         if (!this.world.paperSpigotConfig.optimizeExplosions) {
-            return this.world.a(vec3d, aabb);
+            return calculateDensity(vec3d, aabb);
         }
 
-        CacheKey key = new CacheKey(this, aabb);
-        Float blockDensity = this.world.explosionDensityCache.get(key);
-        if (blockDensity == null) {
-            blockDensity = this.world.a(vec3d, aabb);
+        // IonSpigot start - Optimise Density
+        int key = createKey(this, aabb);
+        float blockDensity = this.world.explosionDensityCache.get(key);
+        if (blockDensity == -1.0f) {
+            blockDensity = calculateDensity(vec3d, aabb);
             this.world.explosionDensityCache.put(key, blockDensity);
         }
 
         return blockDensity;
     }
 
+    private float calculateDensity(Vec3D vec3d, AxisAlignedBB aabb) {
+        if (world.ionConfig.reducedDensityRays) {
+            return calculateDensityReducedRays(vec3d, aabb);
+        } else {
+            return this.world.a(vec3d, aabb);
+        }
+    }
+
+    private float calculateDensityReducedRays(Vec3D vec3d, AxisAlignedBB aabb) {
+        int arrived = 0;
+        int rays = 0;
+
+        for (Vec3D vector : calculateVectors(aabb)) {
+            // If rays from the corners don't hit a block
+            // it should be safe to return the best outcome
+            if (rays == 8 && arrived == 8) {
+                return 1.0F;
+            }
+
+            if (world.rayTrace(vector, vec3d) == null) {
+                ++arrived;
+            }
+
+            ++rays;
+        }
+
+        return (float) arrived / (float) rays;
+    }
+
+    private List<Vec3D> calculateVectors(AxisAlignedBB aabb) {
+        double d0 = 1.0D / ((aabb.d - aabb.a) * 2.0D + 1.0D);
+        double d1 = 1.0D / ((aabb.e - aabb.b) * 2.0D + 1.0D);
+        double d2 = 1.0D / ((aabb.f - aabb.c) * 2.0D + 1.0D);
+        double d3 = (1.0D - Math.floor(1.0D / d0) * d0) / 2.0D;
+        double d4 = (1.0D - Math.floor(1.0D / d2) * d2) / 2.0D;
+
+        if (d0 < 0.0 || d1 < 0.0 || d2 < 0.0) {
+            return Collections.emptyList();
+        }
+
+        List<Vec3D> vectors = new LinkedList<>();
+
+        for (float f = 0.0F; f <= 1.0F; f = (float) ((double) f + d0)) {
+            for (float f1 = 0.0F; f1 <= 1.0F; f1 = (float) ((double) f1 + d1)) {
+                for (float f2 = 0.0F; f2 <= 1.0F; f2 = (float) ((double) f2 + d2)) {
+                    double d5 = aabb.a + (aabb.d - aabb.a) * (double) f;
+                    double d6 = aabb.b + (aabb.e - aabb.b) * (double) f1;
+                    double d7 = aabb.c + (aabb.f - aabb.c) * (double) f2;
+                    Vec3D vector = new Vec3D(d5 + d3, d6, d7 + d4);
+
+                    if ((f == 0 || f + d0 > 1.0F) && (f1 == 0 || f1 + d1 > 1.0F) && (f2 == 0 || f2 + d2 > 1.0F)) {
+                        vectors.add(0, vector);
+                    } else {
+                        vectors.add(vector);
+                    }
+                }
+            }
+        }
+
+        return vectors;
+    }
+
+    static int createKey(Explosion explosion, AxisAlignedBB aabb) {
+        int result;
+        long temp;
+        result = explosion.world.hashCode();
+        temp = Double.doubleToLongBits(explosion.posX);
+        result = 31 * result + (int) (temp ^ (temp >>> 32));
+        temp = Double.doubleToLongBits(explosion.posY);
+        result = 31 * result + (int) (temp ^ (temp >>> 32));
+        temp = Double.doubleToLongBits(explosion.posZ);
+        result = 31 * result + (int) (temp ^ (temp >>> 32));
+        temp = Double.doubleToLongBits(aabb.a);
+        result = 31 * result + (int) (temp ^ (temp >>> 32));
+        temp = Double.doubleToLongBits(aabb.b);
+        result = 31 * result + (int) (temp ^ (temp >>> 32));
+        temp = Double.doubleToLongBits(aabb.c);
+        result = 31 * result + (int) (temp ^ (temp >>> 32));
+        temp = Double.doubleToLongBits(aabb.d);
+        result = 31 * result + (int) (temp ^ (temp >>> 32));
+        temp = Double.doubleToLongBits(aabb.e);
+        result = 31 * result + (int) (temp ^ (temp >>> 32));
+        temp = Double.doubleToLongBits(aabb.f);
+        result = 31 * result + (int) (temp ^ (temp >>> 32));
+        return result;
+    }
+    /* // IonSpigot - comment this out
     static class CacheKey {
         private final World world;
         private final double posX, posY, posZ;
@@ -382,5 +600,7 @@ public class Explosion {
             return result;
         }
     }
+    */
+    // IonSpigot end
     // PaperSpigot end
 }
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index cacd48ccf..2689ad1f4 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -137,7 +137,12 @@ public abstract class World implements IBlockAccess {
     private org.spigotmc.TickLimiter tileLimiter;
     private int tileTickPosition;
     public ExecutorService lightingExecutor = Executors.newSingleThreadExecutor(new ThreadFactoryBuilder().setNameFormat("PaperSpigot - Lighting Thread").build()); // PaperSpigot - Asynchronous lighting updates
-    public final Map<Explosion.CacheKey, Float> explosionDensityCache = new HashMap<Explosion.CacheKey, Float>(); // PaperSpigot - Optimize explosions
+    // IonSpigot start - Optimise Density Cache
+    public final it.unimi.dsi.fastutil.ints.Int2FloatMap explosionDensityCache = new it.unimi.dsi.fastutil.ints.Int2FloatOpenHashMap(); // IonSpigot - Use faster collection here // PaperSpigot - Optimize explosions
+    {
+        explosionDensityCache.defaultReturnValue(-1.0f);
+    }
+    // IonSpigot end
 
     public static long chunkToKey(int x, int z)
     {
-- 
2.29.2.windows.2

