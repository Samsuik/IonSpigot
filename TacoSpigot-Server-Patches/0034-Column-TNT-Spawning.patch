From 4bbd83e52720f0457d5b44804f5a9a1cb51a99da Mon Sep 17 00:00:00 2001
From: "kfian294ma4@gmail.com" <kfian294ma4@gmail.com>
Date: Sun, 20 Dec 2020 04:27:12 +0000
Subject: [PATCH] Column TNT Spawning

This significantly improves TNT Merging and Movement Caching efficiency,
in-game through testing this offered an additional improvement of ~1.5x
to the entity count while firing a cannon with TNT Merging enabled.

Though this patch can affect cannons, it can mostly be overlooked as
most issues caused would also be affected by the redstone algorithm used
by the server causing the cannon to be unreliable.

As this does cause some issues, even if they are minor it is disabled by
default.

diff --git a/src/main/java/me/suicidalkids/ion/IonWorldConfig.java b/src/main/java/me/suicidalkids/ion/IonWorldConfig.java
index 73cf41014..07bf42764 100644
--- a/src/main/java/me/suicidalkids/ion/IonWorldConfig.java
+++ b/src/main/java/me/suicidalkids/ion/IonWorldConfig.java
@@ -196,4 +196,16 @@ public class IonWorldConfig {
         ironGolemsFallDamage = getBoolean("iron-golems-take-fall-damage", false);
     }
 
+    private void ColumnSpawning() {
+        boolean def = getAndRemove("tnt.more-efficient-merging", false);
+        boolean tntColumnSpawning = getBoolean("tnt.column-spawning", def);
+
+        if (tntColumnSpawning) {
+            // This may affect some cannons
+            world.dispenserOrder = new me.suicidalkids.ion.blocks.dispenser.ColumnSpawning();
+        } else {
+            world.dispenserOrder = new me.suicidalkids.ion.blocks.dispenser.NormalSpawning();
+        }
+    }
+
 }
diff --git a/src/main/java/me/suicidalkids/ion/blocks/dispenser/ColumnSpawning.java b/src/main/java/me/suicidalkids/ion/blocks/dispenser/ColumnSpawning.java
new file mode 100644
index 000000000..365a57531
--- /dev/null
+++ b/src/main/java/me/suicidalkids/ion/blocks/dispenser/ColumnSpawning.java
@@ -0,0 +1,42 @@
+package me.suicidalkids.ion.blocks.dispenser;
+
+import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
+import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
+import net.minecraft.server.Entity;
+import org.bukkit.craftbukkit.util.LongHash;
+import org.bukkit.util.NumberConversions;
+
+import java.util.ArrayDeque;
+import java.util.Queue;
+
+public class ColumnSpawning implements DispenserOrder {
+
+    private final Long2ObjectMap<Queue<Entity>> queuedSpawns = new Long2ObjectOpenHashMap<>();
+
+    @Override
+    public void queueSpawn(Entity entity) {
+        int floorX = NumberConversions.floor(entity.locX);
+        int floorZ = NumberConversions.floor(entity.locZ);
+        long key = LongHash.toLong(floorX, floorZ);
+
+        Queue<Entity> queue = queuedSpawns.get(key);
+        if (queue == null) {
+            queue = new ArrayDeque<>();
+            queuedSpawns.put(key, queue);
+        }
+
+        queue.add(entity);
+    }
+
+    @Override
+    public void dispatch() {
+        for (Queue<Entity> queue : queuedSpawns.values()) {
+            for (Entity entity; (entity = queue.poll()) != null; ) {
+                addEntity(entity);
+            }
+        }
+
+        queuedSpawns.clear();
+    }
+
+}
diff --git a/src/main/java/me/suicidalkids/ion/blocks/dispenser/DispenserOrder.java b/src/main/java/me/suicidalkids/ion/blocks/dispenser/DispenserOrder.java
new file mode 100644
index 000000000..0e22b267d
--- /dev/null
+++ b/src/main/java/me/suicidalkids/ion/blocks/dispenser/DispenserOrder.java
@@ -0,0 +1,16 @@
+package me.suicidalkids.ion.blocks.dispenser;
+
+import net.minecraft.server.Entity;
+
+public interface DispenserOrder {
+
+    void queueSpawn(Entity entity);
+
+    void dispatch();
+
+    default void addEntity(Entity entity) {
+        entity.world.addEntity(entity);
+        entity.world.makeSound(entity, "game.tnt.primed", 1.0F, 1.0F);
+    }
+
+}
diff --git a/src/main/java/me/suicidalkids/ion/blocks/dispenser/NormalSpawning.java b/src/main/java/me/suicidalkids/ion/blocks/dispenser/NormalSpawning.java
new file mode 100644
index 000000000..44628e54c
--- /dev/null
+++ b/src/main/java/me/suicidalkids/ion/blocks/dispenser/NormalSpawning.java
@@ -0,0 +1,24 @@
+package me.suicidalkids.ion.blocks.dispenser;
+
+import net.minecraft.server.Entity;
+
+import java.util.ArrayDeque;
+import java.util.Queue;
+
+public class NormalSpawning implements DispenserOrder {
+
+    private final Queue<Entity> queuedSpawns = new ArrayDeque<>();
+
+    @Override
+    public void queueSpawn(Entity entity) {
+        queuedSpawns.add(entity);
+    }
+
+    @Override
+    public void dispatch() {
+        for (Entity entity; (entity = queuedSpawns.poll()) != null;) {
+            addEntity(entity);
+        }
+    }
+
+}
diff --git a/src/main/java/net/minecraft/server/BlockFalling.java b/src/main/java/net/minecraft/server/BlockFalling.java
index 5c7912492..93d4df395 100644
--- a/src/main/java/net/minecraft/server/BlockFalling.java
+++ b/src/main/java/net/minecraft/server/BlockFalling.java
@@ -36,6 +36,7 @@ public class BlockFalling extends Block {
 
             if (world.ionConfig.fixSandUnloading || !BlockFalling.instaFall && world.areChunksLoadedBetween(blockposition.a(-b0, -b0, -b0), blockposition.a(b0, b0, b0))) {
                 if (!world.isClientSide) {
+                    world.dispenserOrder.dispatch(); // IonSpigot - Column Spawning
                     // PaperSpigot start - Add FallingBlock source location API
                     org.bukkit.Location loc = new org.bukkit.Location(world.getWorld(), (double) ((float) blockposition.getX() + 0.5F), (double) blockposition.getY(), (double) ((float) blockposition.getZ() + 0.5F));
                     EntityFallingBlock entityfallingblock = new EntityFallingBlock(loc, world, (double) blockposition.getX() + 0.5D, (double) blockposition.getY(), (double) blockposition.getZ() + 0.5D, world.getType(blockposition));
diff --git a/src/main/java/net/minecraft/server/DispenserRegistry.java b/src/main/java/net/minecraft/server/DispenserRegistry.java
index cc7a1e31b..0e9eeb34a 100644
--- a/src/main/java/net/minecraft/server/DispenserRegistry.java
+++ b/src/main/java/net/minecraft/server/DispenserRegistry.java
@@ -548,8 +548,7 @@ public class DispenserRegistry {
                 EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(block.getLocation(), world, event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ(), (EntityLiving) null); // PaperSpigot
                 // CraftBukkit end
 
-                world.addEntity(entitytntprimed);
-                world.makeSound(entitytntprimed, "game.tnt.primed", 1.0F, 1.0F);
+                world.dispenserOrder.queueSpawn(entitytntprimed); // IonSpigot - Column Spawning
                 // --itemstack.count; // CraftBukkit - handled above
                 return itemstack;
             }
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index c8e3541fe..06923705f 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -4,6 +4,10 @@ import com.google.common.base.Predicate;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
+// IonSpigot start
+import me.suicidalkids.ion.blocks.dispenser.DispenserOrder;
+import me.suicidalkids.ion.blocks.dispenser.NormalSpawning;
+// IonSpigot end
 import me.suicidalkids.ion.movement.MovementCache;
 import org.bukkit.Bukkit;
 import org.bukkit.block.BlockState;
@@ -145,6 +149,7 @@ public abstract class World implements IBlockAccess {
     }
     // IonSpigot end
     public final MovementCache movementCache = new MovementCache(); // IonSpigot - Movement Cache
+    public DispenserOrder dispenserOrder = new NormalSpawning(); // IonSpigot - Column Spawning
 
     public static long chunkToKey(int x, int z)
     {
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 40a066ca5..a270a6ccf 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -697,6 +697,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                 }
                 timings.scheduledBlocksTicking.stopTiming(); // Spigot
 
+                this.dispenserOrder.dispatch(); // IonSpigot - Column Spawning
                 this.methodProfiler.b();
                 this.V.clear();
                 return !this.M.isEmpty();
-- 
2.29.2.windows.2

